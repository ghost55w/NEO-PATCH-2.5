const { ovlcmd } = require("../lib/ovlcmd");
const { getData, setfiche, getAllFiches, add_id, del_fiche } = require('../DataBase/allstars_divs_fiches');

const registeredFiches = new Set();

function normalizeText(text) {
  return text.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
}

function add_fiche(nom_joueur, jid, image_oc, joueur_div) {
  if (registeredFiches.has(nom_joueur)) return;
  registeredFiches.add(nom_joueur);

  ovlcmd({
    nom_cmd: nom_joueur,
    classe: joueur_div,
    react: "‚úÖ"
  },
  async (ms_org, ovl, cmd_options) => {
    const { repondre, ms, arg, prenium_id } = cmd_options;

    try {
      const data = await getData({ jid: jid });

      if (!arg.length) {
        const fiche = `‚ñë‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë *üë§N E O P L A Y E R üéÆ*
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
‚óá *Pseudoüë§*: ${data.pseudo}
‚óá *Classement continentalüåç:* ${data.classement}
‚óá *Niveau XP‚è´*: ${data.niveu_xp} ‚è´
‚óá *Divisionüõ°Ô∏è*: ${data.division}
‚óá *Rank üéñÔ∏è*: ${data.rang}
‚óá *ClasseüéñÔ∏è*: ${data.classe}
‚óá *Saisons ProüèÜ*: ${data.saison_pro}
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
‚óá *Goldsüß≠*: ${data.golds} ¬©üß≠
‚óá *Fansüë•*: ${data.fans} üë•
‚óá *Archetype ‚öñÔ∏è*: ${data.archetype}
‚óá *Commentaire*: ${data.commentaire}
‚ñë‚ñí‚ñë‚ñë PALMAR√àSüèÜ
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
‚úÖ Victoires: ${data.victoires} - ‚ùå D√©faites: ${data.defaites}
*‚óáüèÜChampionnats*: ${data.championnants}
*‚óáüèÜNEO cupüí´*: ${data.neo_cup}
*‚óáüèÜEVOüí†*: ${data.evo}
*‚óáüèÜGrandSlamüÖ∞Ô∏è*: ${data.grandslam}
*‚óáüåüTOS*: ${data.tos}
*‚óáüëëThe BESTüèÜ*: ${data.the_best}
*‚óáüóøSigmaüèÜ*: ${data.sigma}
*‚óáüéñÔ∏èNeo Globes*: ${data.neo_globes}
*‚óáüèµÔ∏èGolden RookieüèÜ*: ${data.golden_boy}
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
‚úÖ Cleans: ${data.cleans}
‚ùå Erreurs: ${data.erreurs}
üìà Note: ${data.note}/100
‚ñë‚ñí‚ñë‚ñí‚ñë STATS üìä
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
‚å¨ *Talent‚≠ê :*         ‚ñ±‚ñ±‚ñ±‚ñ±‚ñ¨‚ñ¨‚ñ¨ ${data.talent}
‚å¨ *Intelligenceüß†:* ‚ñ±‚ñ±‚ñ±‚ñ±‚ñ¨‚ñ¨‚ñ¨ ${data.intelligence}
‚å¨ *Speedüí¨ :*         ‚ñ±‚ñ±‚ñ±‚ñ±‚ñ¨‚ñ¨‚ñ¨  ${data.speed}
‚å¨ *Close fightüëäüèª:*  ‚ñ±‚ñ±‚ñ±‚ñ±‚ñ¨‚ñ¨‚ñ¨ ${data.close_fight}
‚å¨ *AttaquesüåÄ:*     ‚ñ±‚ñ±‚ñ±‚ñ±‚ñ¨‚ñ¨‚ñ¨ ${data.attaques}
‚ñë‚ñí‚ñë‚ñí‚ñë CARDS üé¥: ${data.total_cards}
‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñî‚ñë‚ñí‚ñí‚ñí‚ñí‚ñë‚ñë‚ñí‚ñë
·™£ ${data.cards}
‚ñ±‚ñ±‚ñ±‚ñ± ‚ñ±‚ñ±‚ñ±‚ñ± 
*‚å¨ùó°SLProüèÜ*
> NEO SUPER LEAGUE ESPORTS‚Ñ¢`;

        await ovl.sendMessage(ms_org, {
          video: { url: 'https://files.catbox.moe/0qzigf.mp4' },
          gifPlayback: true,
          caption: ""
        }, { quoted: ms });

        return ovl.sendMessage(ms_org, {
          image: { url: data.oc_url },
          caption: fiche
        }, { quoted: ms });
      }

      if (!prenium_id) return await repondre("‚õî Acc√®s refus√© ! Seuls les membres de la NS peuvent faire √ßa.");

      const updates = await processUpdates(arg, jid);
      await updatePlayerData(updates, jid);

      const message = updates.map(u =>
        `üõ†Ô∏è *${u.colonne}* modifi√© : \`${u.oldValue}\` ‚û§ \`${u.newValue}\``
      ).join('\n');

      await repondre("‚úÖ Fiche mise √† jour avec succ√®s !\n\n" + message);

    } catch (err) {
      console.error("Erreur:", err);
      await repondre("‚ùå Une erreur est survenue. V√©rifie les param√®tres.");
    }
  });
}

async function processUpdates(args, jid) {
  const updates = [];
  const data = await getData({ jid: jid });
  const columns = Object.keys(data.dataValues);
  let i = 0;

  while (i < args.length) {
    const object = args[i++];
    const signe = args[i++];
    const valeur = args[i++];
    const texte = valeur !== undefined ? [valeur] : [];

    while (i < args.length && !['+', '-', '=', 'add', 'supp'].includes(args[i]) &&
      !columns.includes(args[i])) {
    }

    if (!Object.keys(data.dataValues).includes(object)) {
      throw new Error(`‚ùå La colonne '${object}' n'existe pas.`);
    }

    const oldValue = data[object];
    let newValue;

    if (signe === '+' || signe === '-') {
      const n1 = Number(oldValue) || 0;
      const n2 = Number(valeur) || 0;
      newValue = signe === '+' ? n1 + n2 : n1 - n2;
    } else if (signe === '=') {
      newValue = texte.join(' ');
    } else if (signe === 'add') {
      newValue = (oldValue + ' ' + texte.join(' ')).trim();
    } else if (signe === 'supp') {
      const regex = new RegExp(`\\b${normalizeText(texte.join(' '))}\\b`, 'gi');
      newValue = oldValue.replace(regex, '').trim();
    } else {
      throw new Error(`‚ùå Signe non reconnu : ${signe}`);
    }

    updates.push({ colonne: object, oldValue, newValue });
  }

  return updates;
}

async function updatePlayerData(updates, jid) {
  for (const update of updates) {
    await setfiche(update.colonne, update.newValue, jid);
  }
}

async function initFichesAuto() {
  try {
    const all = await getAllFiches();

    for (const player of all) {
      if (!player.code_fiche || player.code_fiche == "pas de fiche" || !player.division || !player.oc_url || !player.id) continue;

      const nom = player.code_fiche;
      const jid = player.jid;
      const image = player.oc_url;
      const division = player.division.replace(/\*/g, '');

      add_fiche(nom, jid, image, division);
    }
  } catch (e) {
    console.error("Erreur d'initFichesAuto:", e);
  }
}

initFichesAuto();

ovlcmd({
  nom_cmd: "add_fiche",
  alias: [],
  classe: "Other",
  react: "‚ûï",
}, async (ms_org, ovl, { repondre, arg, prenium_id }) => {
  if (!prenium_id) return await repondre("‚õî Acc√®s refus√© !");
  if (arg.length < 3) return await repondre("‚ùå Syntaxe : add_fiche <jid> <code_fiche> <division>");

  const jid = arg[0];
  const code_fiche = arg[1];
  const division = arg.slice(2).join(" ");

  try {
    await add_id(jid, { code_fiche, division });
    await initFichesAuto();

    await repondre(
      `‚úÖ Nouvelle fiche enregistr√©e :\n` +
      `‚Ä¢ *JID* : \`${jid}\`\n` +
      `‚Ä¢ *Code Fiche* : \`${code_fiche}\`\n` +
      `‚Ä¢ *Division* : \`${division}\``
    );
  } catch (err) {
    console.error("‚ùå Erreur lors de l'ajout de la fiche :", err);
    await repondre("‚ùå Erreur lors de l'ajout de la fiche. V√©rifie la console pour plus de d√©tails.");
  }
});

ovlcmd({
  nom_cmd: "del_fiche",
  classe: "Other",
  react: "üóëÔ∏è",
}, async (ms_org, ovl, { repondre, arg, prenium_id }) => {
  if (!prenium_id) return await repondre("‚õî Acc√®s refus√© !");
  if (!arg.length) return await repondre("‚ùå Syntaxe : del_fiche <code_fiche>");

  const code_fiche = arg.join(' ');
  try {
    const deleted = await del_fiche(code_fiche);
    if (deleted === 0) return await repondre("‚ùå Aucune fiche trouv√©e.");
    registeredFiches.delete(code_fiche);
    await repondre(`‚úÖ Fiche supprim√©e : \`${code_fiche}\``);
    await initFichesAuto();
  } catch (err) {
    console.error(err);
    await repondre("‚ùå Erreur lors de la suppression de la fiche.");
  }
});
